#include <math.h>

#define uint32_t __UINT32_TYPE__
#define uint16_t __UINT16_TYPE__
#define uint8_t __UINT8_TYPE__
#define float32_t float

#define PI (float) 3.14159265358979

//******************************************************************//
//     LowPass with First Order IIR Filter with parameter Alpha     //
//******************************************************************//

typedef struct{

  float32_t fs_Hz;        //Sampling Frequency in Hz

  float32_t coeffs[2];    //{a0, b1} a0 and b1 coefficients of IIR Filter

  float32_t out;          //Output of a filter (used as previous output in computacion)

} LowPass_IIR;


void LowPass_init(LowPass_IIR *filter, float32_t fc_Hz, float32_t fs_Hz);
void LowPass_Set_Cutoff(LowPass_IIR *filter, float32_t fc_Hz);
float32_t LowPass_Calculate_Sample(LowPass_IIR *filter, float32_t input);


//********************************************************//
//         HighPass with First Order IIR Filter           //
//********************************************************//

typedef struct{

  float32_t fs_Hz;            //Sampling Frequency in Hz

  float32_t coefficient_b0;   //b0 coefficient of IIR Filter

  float32_t previous_input;   //Previous input of the filter
  float32_t out;              //Output of a filter (used as previous output in computacion)

} HighPass_IIR;


void HighPass_init(HighPass_IIR *filter, float32_t fc_Hz, float32_t fs_Hz);
void HighPass_Set_Cutoff(HighPass_IIR *filter, float32_t fc_Hz);
float32_t HighPass_Calculate_Sample(HighPass_IIR *filter, float32_t Input);


//********************************************************//
//          Overdrive with output LowPass filter          //
//********************************************************//
typedef struct{
  float32_t Gain;
  float32_t threshold;
  float32_t volume;
  LowPass_IIR LowPass;
  bool LowPass_Enable;
} Overdrive;

void Overdrive_init(Overdrive *filter, float32_t Gain, float32_t threshold, float32_t LowPass_fc_Hz, float32_t fs_Hz, float32_t volume);
void Overdrive_set_all_params(Overdrive *filter, float32_t Gain, float32_t threshold, float32_t LowPass_fc_Hz, float32_t volume);
void Overdrive_set_Gain(Overdrive *filter, float32_t Gain);
void Overdrive_set_Threshold(Overdrive *filter, float32_t threshold);
void Overdrive_set_LowPass_cutoff(Overdrive *filter, float32_t LowPass_fc_Hz);
void Overdrive_Enable_LowPass(Overdrive *filter);
void Overdrive_Disable_LowPass(Overdrive *filter);
float32_t Overdrive_Calculate_Sample(Overdrive *filter, float32_t Input);


//********************************************************//
//         Anti-Aliasing with FIR Filter (1/4 fs)         //
//********************************************************//
#define ANTI_ALIASING_FIR_LENGHT 53

/*

FIR filter designed with
http://t-filter.appspot.com

sampling frequency: 48000 Hz

* 0 Hz - 12000 Hz
  gain = 1
  desired ripple = 1 dB
  actual ripple = 0.7146714989809755 dB

* 14000 Hz - 24000 Hz
  gain = 0
  desired attenuation = -60 dB
  actual attenuation = -60.442068245893125 dB

*/
static float32_t ANTI_ALIASING_FIR_RESPONSE[ANTI_ALIASING_FIR_LENGHT] = {
  0.0013363984682966637,
  0.008061622696089416,
  0.012263171048427581,
  0.004129500614787333,
  -0.007097743929348795,
  -0.002777918200269113,
  0.00794388268479777,
  0.0015881188565752345,
  -0.009977298047872183,
  0.00001283516924876204,
  0.012538552531128956,
  -0.002511423879772231,
  -0.015453462756882985,
  0.006292295104163975,
  0.018523612691347394,
  -0.011901434235850907,
  -0.02157570187928433,
  0.020188285263516112,
  0.024438473994799294,
  -0.032819896056755206,
  -0.0269098576252838,
  0.054138855455206435,
  0.028817712715210837,
  -0.10018505385468653,
  -0.030022404764111783,
  0.3163009588670094,
  0.5304324428693132,
  0.3163009588670094,
  -0.030022404764111783,
  -0.10018505385468653,
  0.028817712715210837,
  0.054138855455206435,
  -0.0269098576252838,
  -0.032819896056755206,
  0.024438473994799294,
  0.020188285263516112,
  -0.02157570187928433,
  -0.011901434235850907,
  0.018523612691347394,
  0.006292295104163975,
  -0.015453462756882985,
  -0.002511423879772231,
  0.012538552531128956,
  0.00001283516924876204,
  -0.009977298047872183,
  0.0015881188565752345,
  0.00794388268479777,
  -0.002777918200269113,
  -0.007097743929348795,
  0.004129500614787333,
  0.012263171048427581,
  0.008061622696089416,
  0.0013363984682966637
};


typedef struct{

  float32_t previous_input_buffer[ANTI_ALIASING_FIR_LENGHT];  //Circular Previous input buffer of the filter
  uint16_t buffer_index;                                      //Buffer index of Circular Previous input buffer
  float32_t out;                                              //Output of a filter (used as previous output in computacion)

} AntiAliasing_FIR;


void AntiAliasing_FIR_init(AntiAliasing_FIR *filter);
float32_t AntiAliasing_FIR_Calculate_Sample(AntiAliasing_FIR *filter, float32_t Input);


//********************************************************//
//          Cabity Simulation with FIR Filter             //
//********************************************************//
#define CAB_SIM_FIR_LENGHT 256

static float32_t CAB_SIM_FIR_RESPONSE[CAB_SIM_FIR_LENGHT] = {-0.0001468658447265625,0.0001964569091796875,-0.0001978874206542969,-7.450580596923828e-05,-0.0009708404541015625,-0.001447558403015137,-0.003106832504272461,-0.004198789596557617,-0.006371498107910156,-0.00760805606842041,-0.009731531143188477,-0.01048886775970459,-0.01173865795135498,-0.01071047782897949,-0.01061594486236572,-0.00895535945892334,-0.008748054504394531,-0.006865262985229492,-0.006893754005432129,-0.00498509407043457,-0.00526130199432373,-0.003097653388977051,-0.00416719913482666,-0.001504182815551758,-0.003433585166931152,0.0002646446228027344,-0.007707595825195312,-0.004114151000976562,0.004053950309753418,-0.004732370376586914,-0.002352595329284668,-0.004454970359802246,-0.003254055976867676,-0.004546761512756348,-0.00338590145111084,-0.003306150436401367,-0.001633882522583008,0.001059293746948242,0.01312518119812012,0.04727208614349365,0.1026631593704224,0.1488178968429565,0.1761863231658936,0.1902879476547241,0.2036404609680176,0.2611385583877563,0.433655858039856,0.7074693441390991,0.8569886684417725,0.7490413188934326,0.5440083742141724,0.2537643909454346,-0.1462959051132202,-0.4105359315872192,-0.4589409828186035,-0.4171967506408691,-0.2434719800949097,0.02577757835388184,0.1969414949417114,0.2263511419296265,0.2007653713226318,0.1130962371826172,-0.01431870460510254,-0.07967031002044678,-0.05822074413299561,-0.02836120128631592,-0.0002615451812744141,0.0238039493560791,0.01679408550262451,-0.04279446601867676,-0.07922577857971191,-0.09766662120819092,-0.1233943700790405,-0.1347973346710205,-0.11025071144104,-0.06380510330200195,-0.02139937877655029,0.01606345176696777,0.03443372249603271,0.01598203182220459,-0.01750707626342773,-0.05273020267486572,-0.1039720773696899,-0.1468340158462524,-0.1502311229705811,-0.1171451807022095,-0.0717313289642334,-0.02543222904205322,0.01433730125427246,0.0335996150970459,0.04608631134033203,0.050484299659729,0.03930759429931641,0.01913309097290039,0.001709938049316406,-0.008154511451721191,-0.01549828052520752,-0.03922140598297119,-0.06575226783752441,-0.07969331741333008,-0.08737051486968994,-0.08966028690338135,-0.07378506660461426,-0.045540452003479,-0.01948678493499756,-0.005942940711975098,-0.007567763328552246,-0.02140426635742188,-0.04936909675598145,-0.0826261043548584,-0.1113138198852539,-0.1229686737060547,-0.1286871433258057,-0.1235165596008301,-0.1089287996292114,-0.09163403511047363,-0.07133376598358154,-0.05562722682952881,-0.05120587348937988,-0.05184781551361084,-0.04031467437744141,-0.03090465068817139,-0.02868413925170898,-0.03226900100708008,-0.03290331363677979,-0.04634857177734375,-0.06165814399719238,-0.06975436210632324,-0.07229089736938477,-0.07010746002197266,-0.06235766410827637,-0.04752993583679199,-0.03858351707458496,-0.0317537784576416,-0.03339600563049316,-0.03968250751495361,-0.05646693706512451,-0.06928527355194092,-0.07693040370941162,-0.07978785037994385,-0.08009159564971924,-0.07363045215606689,-0.06808900833129883,-0.06336319446563721,-0.06059873104095459,-0.06164741516113281,-0.06781089305877686,-0.07122302055358887,-0.06961989402770996,-0.07154405117034912,-0.0719761848449707,-0.06468725204467773,-0.05523443222045898,-0.04547238349914551,-0.03836023807525635,-0.04071962833404541,-0.04986286163330078,-0.0584709644317627,-0.06574738025665283,-0.07135176658630371,-0.07510483264923096,-0.07489204406738281,-0.07008528709411621,-0.05964064598083496,-0.04727065563201904,-0.0333867073059082,-0.02157974243164062,-0.01299750804901123,-0.01117610931396484,-0.01514124870300293,-0.02209901809692383,-0.02799570560455322,-0.02883315086364746,-0.02274775505065918,-0.01477837562561035,-0.009535670280456543,-0.005711197853088379,-0.01084303855895996,-0.02223896980285645,-0.03471672534942627,-0.04142498970031738,-0.04226112365722656,-0.03388631343841553,-0.01971566677093506,-0.003098011016845703,0.01018822193145752,0.01697421073913574,0.0160449743270874,0.01182866096496582,0.004431605339050293,-0.004875421524047852,-0.01094460487365723,-0.01189601421356201,-0.009910702705383301,-0.008088469505310059,-0.009661197662353516,-0.01281678676605225,-0.01735770702362061,-0.02042984962463379,-0.01769685745239258,-0.01050758361816406,-0.002936005592346191,0.0009413957595825195,-0.002646207809448242,-0.01141488552093506,-0.02264726161956787,-0.03230762481689453,-0.03531384468078613,-0.0294419527053833,-0.0178830623626709,-0.005101323127746582,0.002222418785095215,0.001328349113464355,-0.007322192192077637,-0.01847147941589355,-0.02791476249694824,-0.03193497657775879,-0.02762091159820557,-0.01672112941741943,-0.004060029983520508,0.004973173141479492,0.01089859008789062,0.01259398460388184,0.01125633716583252,0.008728742599487305,0.005681872367858887,0.001275897026062012,-0.002165436744689941,-0.006267309188842773,-0.010475754737854,-0.01385009288787842,-0.01494097709655762,-0.01318120956420898,-0.007632017135620117,0.001314520835876465,0.01012778282165527,0.01579451560974121,0.01690471172332764,0.01286602020263672,0.005153179168701172,-0.003250956535339355,-0.008680462837219238,-0.008130073547363281,-0.00145268440246582,0.009754538536071777,0.02241957187652588,0.03394150733947754,0.04199647903442383,0.04506278038024902,0.04360103607177734,0.03934907913208008,0.03486835956573486,0.03223180770874023,0.03154492378234863,0.03246259689331055,0.0351715087890625

};


typedef struct{

    float32_t previous_input_buffer[CAB_SIM_FIR_LENGHT];        //Circular Previous input buffer of the filter
    uint16_t buffer_index;                                      //Buffer index of Circular Previous input buffer
    float32_t out;                                              //Output of a filter (used as previous output in computacion)

} CabSim_FIR;


void CabSim_FIR_init(CabSim_FIR *filter);
float32_t CabSim_FIR_Calculate_Sample(CabSim_FIR *filter, float32_t Input);


//********************************************************//
//        FIR Filters Optimized by esp-dsp library        //
//********************************************************//
#include "dsp_common.h"
#include "dsps_fir.h"

//********************************************************//
//      Cabity Simulation with FIR Filter Optymized       //
//********************************************************//

 /*
  *   CAB_SIM_ESP_S3_FIR_LENGHT must be devisible by 4
  *   CAB_SIM_ESP_S3_FIR_RESPONSE must be in time revesed order (first coeff is last ect.)
  *   CAB_SIM_ESP_S3_FIR_RESPONSE must be aligned to 16 (it is done by this function: __attribute__((aligned(16))); )
  */

#define CAB_SIM_ESP_S3_FIR_LENGHT 256
#define CAB_SIM_ESP_S3_BLOCK_LENGHT (I2S_BUFFER_SIZE / 2)

const float32_t CAB_SIM_ESP_S3_FIR_RESPONSE[CAB_SIM_ESP_S3_FIR_LENGHT] = {-0.0001468658447265625,0.0001964569091796875,-0.0001978874206542969,-7.450580596923828e-05,-0.0009708404541015625,-0.001447558403015137,-0.003106832504272461,-0.004198789596557617,-0.006371498107910156,-0.00760805606842041,-0.009731531143188477,-0.01048886775970459,-0.01173865795135498,-0.01071047782897949,-0.01061594486236572,-0.00895535945892334,-0.008748054504394531,-0.006865262985229492,-0.006893754005432129,-0.00498509407043457,-0.00526130199432373,-0.003097653388977051,-0.00416719913482666,-0.001504182815551758,-0.003433585166931152,0.0002646446228027344,-0.007707595825195312,-0.004114151000976562,0.004053950309753418,-0.004732370376586914,-0.002352595329284668,-0.004454970359802246,-0.003254055976867676,-0.004546761512756348,-0.00338590145111084,-0.003306150436401367,-0.001633882522583008,0.001059293746948242,0.01312518119812012,0.04727208614349365,0.1026631593704224,0.1488178968429565,0.1761863231658936,0.1902879476547241,0.2036404609680176,0.2611385583877563,0.433655858039856,0.7074693441390991,0.8569886684417725,0.7490413188934326,0.5440083742141724,0.2537643909454346,-0.1462959051132202,-0.4105359315872192,-0.4589409828186035,-0.4171967506408691,-0.2434719800949097,0.02577757835388184,0.1969414949417114,0.2263511419296265,0.2007653713226318,0.1130962371826172,-0.01431870460510254,-0.07967031002044678,-0.05822074413299561,-0.02836120128631592,-0.0002615451812744141,0.0238039493560791,0.01679408550262451,-0.04279446601867676,-0.07922577857971191,-0.09766662120819092,-0.1233943700790405,-0.1347973346710205,-0.11025071144104,-0.06380510330200195,-0.02139937877655029,0.01606345176696777,0.03443372249603271,0.01598203182220459,-0.01750707626342773,-0.05273020267486572,-0.1039720773696899,-0.1468340158462524,-0.1502311229705811,-0.1171451807022095,-0.0717313289642334,-0.02543222904205322,0.01433730125427246,0.0335996150970459,0.04608631134033203,0.050484299659729,0.03930759429931641,0.01913309097290039,0.001709938049316406,-0.008154511451721191,-0.01549828052520752,-0.03922140598297119,-0.06575226783752441,-0.07969331741333008,-0.08737051486968994,-0.08966028690338135,-0.07378506660461426,-0.045540452003479,-0.01948678493499756,-0.005942940711975098,-0.007567763328552246,-0.02140426635742188,-0.04936909675598145,-0.0826261043548584,-0.1113138198852539,-0.1229686737060547,-0.1286871433258057,-0.1235165596008301,-0.1089287996292114,-0.09163403511047363,-0.07133376598358154,-0.05562722682952881,-0.05120587348937988,-0.05184781551361084,-0.04031467437744141,-0.03090465068817139,-0.02868413925170898,-0.03226900100708008,-0.03290331363677979,-0.04634857177734375,-0.06165814399719238,-0.06975436210632324,-0.07229089736938477,-0.07010746002197266,-0.06235766410827637,-0.04752993583679199,-0.03858351707458496,-0.0317537784576416,-0.03339600563049316,-0.03968250751495361,-0.05646693706512451,-0.06928527355194092,-0.07693040370941162,-0.07978785037994385,-0.08009159564971924,-0.07363045215606689,-0.06808900833129883,-0.06336319446563721,-0.06059873104095459,-0.06164741516113281,-0.06781089305877686,-0.07122302055358887,-0.06961989402770996,-0.07154405117034912,-0.0719761848449707,-0.06468725204467773,-0.05523443222045898,-0.04547238349914551,-0.03836023807525635,-0.04071962833404541,-0.04986286163330078,-0.0584709644317627,-0.06574738025665283,-0.07135176658630371,-0.07510483264923096,-0.07489204406738281,-0.07008528709411621,-0.05964064598083496,-0.04727065563201904,-0.0333867073059082,-0.02157974243164062,-0.01299750804901123,-0.01117610931396484,-0.01514124870300293,-0.02209901809692383,-0.02799570560455322,-0.02883315086364746,-0.02274775505065918,-0.01477837562561035,-0.009535670280456543,-0.005711197853088379,-0.01084303855895996,-0.02223896980285645,-0.03471672534942627,-0.04142498970031738,-0.04226112365722656,-0.03388631343841553,-0.01971566677093506,-0.003098011016845703,0.01018822193145752,0.01697421073913574,0.0160449743270874,0.01182866096496582,0.004431605339050293,-0.004875421524047852,-0.01094460487365723,-0.01189601421356201,-0.009910702705383301,-0.008088469505310059,-0.009661197662353516,-0.01281678676605225,-0.01735770702362061,-0.02042984962463379,-0.01769685745239258,-0.01050758361816406,-0.002936005592346191,0.0009413957595825195,-0.002646207809448242,-0.01141488552093506,-0.02264726161956787,-0.03230762481689453,-0.03531384468078613,-0.0294419527053833,-0.0178830623626709,-0.005101323127746582,0.002222418785095215,0.001328349113464355,-0.007322192192077637,-0.01847147941589355,-0.02791476249694824,-0.03193497657775879,-0.02762091159820557,-0.01672112941741943,-0.004060029983520508,0.004973173141479492,0.01089859008789062,0.01259398460388184,0.01125633716583252,0.008728742599487305,0.005681872367858887,0.001275897026062012,-0.002165436744689941,-0.006267309188842773,-0.010475754737854,-0.01385009288787842,-0.01494097709655762,-0.01318120956420898,-0.007632017135620117,0.001314520835876465,0.01012778282165527,0.01579451560974121,0.01690471172332764,0.01286602020263672,0.005153179168701172,-0.003250956535339355,-0.008680462837219238,-0.008130073547363281,-0.00145268440246582,0.009754538536071777,0.02241957187652588,0.03394150733947754,0.04199647903442383,0.04506278038024902,0.04360103607177734,0.03934907913208008,0.03486835956573486,0.03223180770874023,0.03154492378234863,0.03246259689331055,0.0351715087890625

};



typedef struct{

  fir_f32_t dsp_filter;                                                       //Filter struck used internaly by esp-dsp library
  float32_t coeffs[CAB_SIM_ESP_S3_FIR_LENGHT] __attribute__((aligned(16)));   //coeffs of the filter aligned to 16
  float32_t delay[CAB_SIM_ESP_S3_FIR_LENGHT+4];                               //array for FIR filter delay line. Must have a length = coeffs_len + 4
  float32_t out[CAB_SIM_ESP_S3_BLOCK_LENGHT];                                 //Output of a filter after computaction

} CabSim_ESP_S3_FIR;


void CabSim_ESP_S3_FIR_init(CabSim_ESP_S3_FIR *filter);
void CabSim_ESP_S3_FIR_Calculate_Block(CabSim_ESP_S3_FIR *filter, float32_t *Input);